{"ast":null,"code":"import _classCallCheck from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/src/components/DataComponents/TestGrid.jsx\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\nimport { fetchLogsForGrid } from \"../rest/ajax.js\";\nimport store from \"../stores/store.js\";\nvar defaultColumnProperties = {\n  sortable: true,\n  width: 320\n};\nvar columns = [{\n  key: \"id\",\n  name: \"ID\",\n  resizable: true\n}, {\n  key: \"ipaddress\",\n  name: \"SOURCE IP\",\n  resizable: true\n}, {\n  key: \"type\",\n  name: \"SEVERITY\",\n  sortDescendingFirst: true\n}, {\n  key: \"message\",\n  name: \"DESCRIPTION\"\n}, {\n  key: \"timestamp\",\n  name: \"TIMESTAMP\"\n}].map(function (c) {\n  return _objectSpread({}, c, defaultColumnProperties);\n});\n\nvar sortRows = function sortRows(initialRows, sortColumn, sortDirection) {\n  return function (rows) {\n    var comparer = function comparer(a, b) {\n      if (sortDirection === \"ASC\") {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      } else if (sortDirection === \"DESC\") {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      }\n    };\n\n    return sortDirection === \"NONE\" ? initialRows : _toConsumableArray(rows).sort(comparer);\n  };\n};\n\nvar TestGrid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TestGrid, _React$Component);\n\n  // const [rows, setRows] = useState(store.getState().logs);\n  function TestGrid(props) {\n    var _this;\n\n    _classCallCheck(this, TestGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestGrid).call(this, props));\n\n    _this.onGridRowsUpdated = function (_ref) {\n      var fromRow = _ref.fromRow,\n          toRow = _ref.toRow,\n          updated = _ref.updated;\n\n      _this.setState(function (state) {});\n    };\n\n    store.subscribe(function () {\n      _this.forceUpdate();\n    });\n    fetchLogsForGrid();\n    console.log(\"Grid constructor...\", store.getState());\n    return _this;\n  } //   onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n  //     this.setState(state => {\n  //       alert(\"I am called\");\n  //       const rows = state.rows.slice();\n  //       alert(rows[0].ipaddress.value);\n  //       for (let i = fromRow; i <= toRow; i++) {\n  //         rows[i] = { ...rows[i], ...updated };\n  //       }\n  //       return { rows };\n  //     });\n  //   };\n\n\n  _createClass(TestGrid, [{\n    key: \"render\",\n    value: function render() {\n      //const [rows, setRows] = useState(50);\n      return React.createElement(ReactDataGrid, {\n        columns: columns,\n        rowGetter: function rowGetter(i) {\n          return store.getState().logs[i];\n        },\n        rowsCount: store.getState().logs.length,\n        onGridRowsUpdated: this.onGridRowsUpdated,\n        onGridSort: function onGridSort(sortColumn, sortDirection) {\n          return sortRows(sortColumn, sortDirection);\n        },\n        enableCellSelect: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TestGrid;\n}(React.Component);\n\nexport default TestGrid;","map":{"version":3,"sources":["/Users/sudhatri/Desktop/gitProjects/CMAD-nms-monitoring/src/components/DataComponents/TestGrid.jsx"],"names":["React","useState","ReactDOM","ReactDataGrid","fetchLogsForGrid","store","defaultColumnProperties","sortable","width","columns","key","name","resizable","sortDescendingFirst","map","c","sortRows","initialRows","sortColumn","sortDirection","rows","comparer","a","b","sort","TestGrid","props","onGridRowsUpdated","fromRow","toRow","updated","setState","state","subscribe","forceUpdate","console","log","getState","i","logs","length","Component"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\nimport { fetchLogsForGrid } from \"../rest/ajax.js\";\nimport store from \"../stores/store.js\";\n\nconst defaultColumnProperties = {\n  sortable: true,\n  width: 320\n};\n\nconst columns = [\n  { key: \"id\", name: \"ID\", resizable: true },\n  { key: \"ipaddress\", name: \"SOURCE IP\", resizable: true },\n  { key: \"type\", name: \"SEVERITY\", sortDescendingFirst: true },\n  { key: \"message\", name: \"DESCRIPTION\" },\n  { key: \"timestamp\", name: \"TIMESTAMP\" }\n].map(c => ({ ...c, ...defaultColumnProperties }));\n\nconst sortRows = (initialRows, sortColumn, sortDirection) => rows => {\n  const comparer = (a, b) => {\n    if (sortDirection === \"ASC\") {\n      return a[sortColumn] > b[sortColumn] ? 1 : -1;\n    } else if (sortDirection === \"DESC\") {\n      return a[sortColumn] < b[sortColumn] ? 1 : -1;\n    }\n  };\n  return sortDirection === \"NONE\" ? initialRows : [...rows].sort(comparer);\n};\n\nclass TestGrid extends React.Component {\n  // const [rows, setRows] = useState(store.getState().logs);\n  onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    this.setState(state => {});\n  };\n\n  constructor(props) {\n    super(props);\n    store.subscribe(() => {\n      this.forceUpdate();\n    });\n    fetchLogsForGrid();\n    console.log(\"Grid constructor...\", store.getState());\n  }\n\n  //   onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n  //     this.setState(state => {\n  //       alert(\"I am called\");\n  //       const rows = state.rows.slice();\n  //       alert(rows[0].ipaddress.value);\n  //       for (let i = fromRow; i <= toRow; i++) {\n  //         rows[i] = { ...rows[i], ...updated };\n  //       }\n  //       return { rows };\n  //     });\n  //   };\n\n  render() {\n    //const [rows, setRows] = useState(50);\n    return (\n      <ReactDataGrid\n        columns={columns}\n        rowGetter={i => store.getState().logs[i]}\n        rowsCount={store.getState().logs.length}\n        onGridRowsUpdated={this.onGridRowsUpdated}\n        onGridSort={(sortColumn, sortDirection) =>\n          sortRows(sortColumn, sortDirection)\n        }\n        enableCellSelect={true}\n      />\n    );\n  }\n}\n\nexport default TestGrid;\n"]},"metadata":{},"sourceType":"module"}